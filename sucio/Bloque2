Create: Podemos crear unha táboa, unha base de datos.
CREATE DATABASE myDB;
CREATE SCHEMA myOtherDB;
No son sinónimos*depende del sistema. Preguntar para el test. en mySQL por ejemplo si. Con schema necesitamos menos permisos.



CREATE TABLE Alumno(
	id INTEGER PRIMARY KEY,
	nome NCHAR(50) NOT NULL,
	apelidos NCHAR(200),
	nado DATE;
);
podemos definir propiedades como date, time, timestamp, char, varchar, nchar, nchar varying, text…


Cando eliminamos unha fila dunha tabla e temos outra con un campo que é clave axena da eliminada:
  ->  ON DELETE
  			-> NA - No action - Queda con información "falsa" o "desactualizada" (Se intentamos ler ese campo?)
			-> CASCADE - Elimina en cascada. Si por exemplo eliminamos un departamento de profesores, (tendo os profesores o dept por clave axena) elimínanse tamén os profesores. (casos reais 90% usases este)
			-> SET NULL - Non é moi boa en rendemento. Queda ese campo a null
			-> SET DEFAULT - Poñeriamos un valor por defecto na clave principal. Normalmente é un valor tipo 0 ou algo do estilo que nos entendemos que non é real senon que se puxo a default.
			
			Math full / match parcial
			
Create table > primary key > foreign key > check 
https://www.postgresql.org/docs/9.4/ddl-constraints.html

CONSTRAINTS
(   [CONSTRAINT <nome-de-restricción>  )          //Podemos nomear as restriccións para despois velas a través do diccionario de datos
(   		UNIQUE (<atributos>),      )      // 

[CONSTRAINT <nome-da-restriccion>]
	CHECK predicado(Atributos)
		[[NOT] DEFERRABLE]
		[INITIALLY INMEDIATE|DEFERABLE]
Sólo se permite a actualización dos datos cando o predicado devolve true. O valor predeterminado é NOT DEFERRABLE, é dicir, non aplazado.
No caso de que esteamos a facer unha transacción moi grande, ante a posibilidade de consumir recursos pra despois sufrir un roll-back, podemos
aplazar estas comprobacións ata despois de asegurarnos que realmente podemos chegar ata o final da transacción, e ahí consumir os recursos máquina.
INITIALLY INMEDIATE con DEFERRABLE non ten moito sentido, normalmente seria NOT DEFERRABLE INITIALLY INMEDIATE ou DEFERRABLE INITIALLY DEFERRABLE

agora cambiamos de temiña
DROP SCHEMA
[IF EXISTS] <nome-da-bd>; //o de if exists mola bastante porque evita que borres o que non queres borrar. vocablo full utilidad.

DROP TABLE
[IF EXISTS] <nome-da-taboa>
CASCADE | RESTRICT;          //CASCADE: elimina as taboas cás que está relacionada. // RESTRICT: Non podes borrar a táboa se ten algunha relación con outra táboa filla


Outra cousa

ALTER TABLE
 COLUMNA   | RESTRICCION
ADD | DROP    ADD | DROP

(eu tampouco entendo o esquema)

ALTER TABLE <nome-da-taboa>                                       
|  ADD [COLUMN] <attributo><dominio>
|  DROP COLUMN <attributo> [CASCADE | RESTRICT]
|  ADD <restriccion>
|  DROP <restriccion>

En teoria ata aqui vai ddl
Darse de alta en elephantSQL. Facer un par de bases. postgress.


perdin todo dml por non facer commit :)



ON DELETE | ON UPDATE por defecto temos no action


MODIFICIACIONES(5/3):
	-> CASCADE(90% casos reais)
	-> RESTRICT (non deixaria)
	-> NULL
	-> DEFAULT   -- utilizar un caso artificial pra suplir un null. Nton se utiliza porque é falsificar información. (Prob legais?). 
	
	
// unicidade  -- unite
propablemente non entren asertos, porque salen selects un pouco complexos que non é o que se quere evaluar.

para examen:
-datas inicio e fin : check data inicio menor a data fin
-si hay cousas nas que hay que comprobar valores en varia tablas(asertos) non facer o select 
	constraint de unicidade vai entre parentesis

